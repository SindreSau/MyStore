@model MyStore_Entity_Week4.ViewModels.ItemsViewModel

@{
    ViewData["Title"] = "Table";
}

<h1>List of Shop Items (@Model.CurrentViewName View)</h1>
<a href="/Item/Grid" class="link-info">Grid View</a>

<div class="mt-3">
    <div class="row ">
        <div class="">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search" id="searchInput" value="@ViewData["CurrentFilter"]">
                <button class="btn btn-outline-secondary" type="button" id="searchButton">Search</button>
            </div>
        </div>
    </div>
</div>

<div id="tableContainer">
    <partial name="_ItemTable" model="Model.Items"/>
</div>

@section Scripts {
    <script>
    let searchTimer;
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const tableContainer = document.getElementById('tableContainer');

    function performSearch() {
        const searchString = searchInput.value;
        fetch(`/Item/Table?searchString=${encodeURIComponent(searchString)}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => response.text())
            .then(html => {
                tableContainer.innerHTML = html;
            })
            .catch(error => console.error('Error:', error));
    }

    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimer);
        searchTimer = setTimeout(performSearch, 300);
    });

    searchButton.addEventListener('click', function() {
        clearTimeout(searchTimer);
        performSearch();
    });
</script>
}